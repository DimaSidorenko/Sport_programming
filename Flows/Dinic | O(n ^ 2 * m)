typedef ll capType;

struct edge {
	int from, to;
	capType f, c;
};

vector<edge> es;
vector<int> pt;
vector<int> d;
vector<vector<int>> g;
vector<int> mark;

int n, m, s, t;

//rewrite this if you have case directed graph
void add_edge(int u, int v, capType cap, bool add = true) {
	es.pb({ u, v, 0, cap });
	g[u].pb(szof(es) - 1);

	es.pb({ v, u, 0, 0 });
	g[v].pb(szof(es) - 1);

	if (add) {
		add_edge(v, u, cap, false);
	}
}



capType dfs(int v, capType flow = LINF) {
	if (v == t) {
		return flow;
	}

	for (pt[v]; pt[v] < szof(g[v]); pt[v]++) {
		int id = g[v][pt[v]];
		int u = es[id].to;
			
		if (d[v] + 1 != d[u] || es[id].c - es[id].f == 0) {
			continue;
		}

		capType res = dfs(u, min(flow, es[id].c - es[id].f));
		if (res > 0) {
			es[id].f += res;
			es[id ^ 1].f -= res;

			return res;
		}
	}

	return 0;
}

bool bfs() {
	queue<int> q;
	fill(all(d), -1);
	q.push(s);
	d[s] = 0;

	while (!q.empty()) {
		int v = q.front();
		q.pop();

		for (auto id : g[v]) {
			if (es[id].c > es[id].f && d[es[id].to] == -1) {
				d[es[id].to] = d[v] + 1;
				q.push(es[id].to);
			}
		}
	}
	
	return d[t] != -1;
}


capType dinic() {
	capType flow = 0;
	while (true) {
		if (!bfs()) {
			break;
		}
		fill(all(pt), 0);
		
		while (capType res = dfs(s)) {
			flow += res;
		}
	}

	return flow;
}

void init() {
	g.resize(n);
	pt.resize(n);
	d.resize(n);
}
