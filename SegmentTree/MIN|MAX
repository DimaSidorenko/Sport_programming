vector<pair<ll,ll>> t(4 * N);
vector<int> a;
 
void build(int v, int tl, int tr) {
	if (tl == tr) {
		t[v].fst = a[tl];
		t[v].snd = a[tl];
	}
	else {
		int tm = (tl + tr) / 2;
		build(v * 2 + 1, tl, tm);
		build(v * 2 + 2, tm + 1, tr);
		t[v].fst = min(t[v * 2 + 1].fst,t[v * 2 + 2].fst);
		t[v].snd = max(t[v * 2 + 1].snd,t[v * 2 + 2].snd);
	}
}
 
//ll query(int v, int tl, int tr, int l, int r) {
//	if (r<tl || l>tr)
//		return 0;
//	if (l <= tl && tr <= r) {
//		return t[v];
//	}
//	int tm = (tl + tr) / 2;
//	ll ql = query(v * 2 + 1, tl, tm, l, r);
//	ll qr = query(v * 2 + 1, tl, tm, l, r);
//	return ql + qr;
//}
 
void modify(int v, int tl, int tr, int pos, int value) {
	if (tl == tr) {
		t[v].fst = value;
		t[v].snd = value;
		return;
	}
	int tm = (tl + tr) / 2;
	if (pos <= tm)
		modify(2 * v + 1, tl, tm, pos, value);
	else 
		modify(2 * v + 2, tm+1, tr, pos, value);
	t[v].fst = min(t[v * 2 + 1].fst,t[v * 2 + 2].fst);
	t[v].snd = max(t[v * 2 + 1].snd,t[v * 2 + 2].snd);
}
 
ll Min(int v, int tl, int tr, int l, int r) {
	if (r<tl || l>tr)
		return INT_MAX;
	if (l <= tl && tr <= r) {
		return t[v].fst;
	}
	int tm = (tl + tr) / 2;
	ll ql = Min(v * 2 + 1, tl, tm, l, r);
	ll qr = Min(v * 2 + 2, tm+1, tr, l, r);
	return min(ql,qr);
}
 
ll Max(int v, int tl, int tr, int l, int r) {
	if (r<tl || l>tr)
		return INT_MIN;
	if (l <= tl && tr <= r) {
		return t[v].snd;
	}
	int tm = (tl + tr) / 2;
	ll ql = Max(v * 2 + 1, tl, tm, l, r);
	ll qr = Max(v * 2 + 2, tm+1, tr, l, r);
	return max(ql,qr);
}
 
