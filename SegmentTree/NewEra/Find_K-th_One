// k считается с 0 => [0, 1, 2, 3] 0 - ой элемент = 0.

const int SEGTREE_SIZE = 1e5;
	struct segtree {

		vector<int> t;
		int size;

		int combine(int a, int b) {
			return a + b;
		}

		void init(int n) {
			size = 1;
			while (size < n) {
				size *= 2;
			}
			t.assign(2 * size, 0);
		}

		segtree(int n = SEGTREE_SIZE) {
			init(n);
		}

		segtree(vector<long long> &a) {
			init(a.size());
			build(a);
		}


		void build(vector<long long> &a, int v, int tl, int tr) {
			if (tr - tl == 1) {
				if (tl < a.size())
					t[v] = a[tl];
				return;
			}
			int tm = (tr + tl) / 2;
			build(a, v * 2 + 1, tl, tm);
			build(a, v * 2 + 2, tm, tr);
			t[v] = combine(t[v * 2 + 1], t[v * 2 + 2]);
		}

		void build(vector<long long> &a) {
			build(a, 0, 0, size);
		}

		void set(int v, int tl, int tr, int pos) {
			if (tr - tl == 1) {
				t[v] = 1 - t[v];
				return;
			}
			int tm = (tl + tr) / 2;
			if (pos < tm) {
				set(2 * v + 1, tl, tm, pos);
			}
			else {
				set(2 * v + 2, tm, tr, pos);
			}
			t[v] = combine(t[v * 2 + 1], t[v * 2 + 2]);
		}

		void set(int pos) {
			set(0, 0, size, pos);
		}

		int find(int v, int tl, int tr, int k) {
			if (tr == tl + 1) {
				return tl;
			}
			int tm = (tl + tr) / 2;
			if (k < t[2 * v + 1]) {
				return find(2 * v + 1, tl, tm, k);
			}
			else {
				k -= t[2 * v + 1];
				return find(2 * v + 2, tm, tr, k);
			}
		}

		int find(int k) {
			return find(0, 0, size, k);
		}
	};
