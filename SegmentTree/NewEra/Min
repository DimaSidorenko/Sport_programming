const int SEGTREE_SIZE = 1e5;
struct segtree {
	
	vector<ll> t;
	int size;
	
	void init(int n) {
		size = 1;
		while (size < n) {
			size *= 2;
		}
		t.assign(2 * size, LLONG_MAX);
	}

	segtree(int n = SEGTREE_SIZE) {
		init(n);
	}
	
	segtree(vector<long long> &a) {
		init(a.size());
		build(a);
	}

	void build(vector<long long> &a, int v, int tl, int tr) {
		if (tr - tl == 1) {
			if (tl < a.size())
				t[v] = a[tl];
			return;
		}
		int tm = (tr + tl) / 2;
		build(a, v * 2 + 1, tl, tm);
		build(a, v * 2 + 2, tm, tr);
		t[v] = min(t[v * 2 + 1], t[v * 2 + 2]);
	}

	void build(vector<long long> &a) {
		build(a, 0, 0, size);
	}

	void set(int v, int tl, int tr, int pos, int val) {
		if (tr - tl == 1) {
			t[v] = val;
			return;
		}
		int tm = (tl + tr) / 2;
		if (pos < tm) {
			set(2 * v + 1, tl, tm, pos, val);
		}
		else {
			set(2 * v + 2, tm, tr, pos, val);
		}
		t[v] = min(t[v * 2 + 1], t[v * 2 + 2]);
	}

	void set(int pos, int val) {
		set(0, 0, size, pos, val);
	}

	ll get(int v, int tl, int tr, int l, int r) {
		if (r <= tl || l >= tr)
			return LLONG_MAX;
		if (l <= tl && tr <= r) {
			return t[v];
		}
		int tm = (tl + tr) / 2;
		auto ql = get(v * 2 + 1, tl, tm, l, r);
		auto qr = get(v * 2 + 2, tm, tr, l, r);
		return min(ql, qr);
	}
	
	
	ll get(int l, int r) {
		return get(0, 0, size, l, r);
	}
};
